<JVM 구조>
1. 변수 구분
1.1. Local variables : Method, Constructor 안에 선언
1.2. Instance variables : class 안에, method 밖에 선언
1.3. class variables : static keyword 달고 있음

2. 왜 static method는 객체 만들지 않고 호출할 수 있는지?

3. Runtime Data Area (JVM 메모리 영역)
- JVM이 프로그램을 실행하기 위해 필요한 메모리를 운영체제로부터 할당받은 공간
- 클래스 / 스택 / 힙 / Native 메소드 / PC 레지스터
3.1. 클래스 : Byte code, Class variables, static method
3.2. 스택 : 임시로 스택에 쌓아놓고 메서드 호출이 끝나면 소멸
3.3. 힙 : Instance variable 별도 여기서 관리

4. Class Loader: class file을 loader

5. Execution Engine

6. Garbage Collector

7. Static keyword 장점 : 객체선언 없이도 사용 가능 / 프로그램이 끝나야지만 메모리가 회수된다. // 접근성이 좋으나 / 객체지향 프로그래밍 원칙과 상반됨
외부에서 함부로 접근 X

<Constructor>
- Initialize object
* Rule
- should have the exactly same name as the class
* Every class has at least one
- If we don't explicitly write one, javac build a default constructor

<Object 와 Class의 차이?>
- Class는 Object를 찍어내기 위한 틀

<Array>
1. Declare ex) Int[] nums;
2. Create ex) nums = new int[7];   // size 몰라도 되는데, 요즘에는 ArrayList를 사용한다.
3. Assign value
- Arrays are objects too / 참조할 수 있기 때문에
